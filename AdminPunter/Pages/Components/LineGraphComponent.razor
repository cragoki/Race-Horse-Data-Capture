@using AdminPunter.Pages.Races
@using System.Globalization
@using Plotly.Blazor.Traces.ScatterLib
<div class="container">
@if (Tracker != null)
{
    <div class="row">
            <PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />      
    </div>

        <table>
            <thead>
                <tr>
                    <td>CC - Last Two Races</td>
                    <td>CC - Time Since Last Race</td>
                    <td>Past Performance</td>
                    <td>APP - Strength Of Competition</td>
                    <td>APP - Weight</td>
                    <td>APP - Jockey Contribution</td>
                    <td>PRF - Jockey</td>
                    <td>PRF - Trainer</td>
                    <td>Pref - Track</td>
                    <td>Pref - Distance</td>
                    <td>Pref - Race Type</td>
                    <td>Pref - Going</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Tracker.TotalPointsForLastTwoRaces</td>
                    <td>@Tracker.TotalPointsForTimeSinceLastRace</td>
                    <td>@Tracker.TotalPointsForPastPerformance</td>
                    <td>@Tracker.TotalPointsForStrengthOfCompetition</td>
                    <td>@Tracker.TotalPointsForWeight</td>
                    <td>@Tracker.TotalPointsForJockeyContribution</td>
                    <td>@Tracker.PointsGivenForJockey</td>
                    <td>@Tracker.PointsGivenForTrainer</td>
                    <td>@Tracker.TotalPointsForSpecificTrack</td>
                    <td>@Tracker.TotalPointsForDistance</td>
                    <td>@Tracker.TotalPointsForRaceType</td>
                    <td>@Tracker.TotalPointsForGoing</td>
                </tr>
            </tbody>
        </table>
    <div class="row">
        <ul>
            <li>@Tracker.GetPresentRaceFactorsDescription</li>
            <li>@Tracker.GetCurrentConditionDescription</li>
            <li>@Tracker.GetPastPerformanceDescription</li>
            <li>@Tracker.GetPastPerformanceAdjustmentsDescription</li>
            <li>@Tracker.GetHorsePreferencesDescription</li>
        </ul>
    </div>
}
</div>


@code
{
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter]
    public RaceHorseTrackerViewModel Tracker { get; set; }

    PlotlyChart chart;
    Config config = new Config();
    Layout layout = new Layout();
    decimal totalPoints = 0M;
    protected override async Task OnInitializedAsync()
    {
        if (Tracker != null)
        {
            data = GenerateAxis();
        }
    }
    // Using of the interface IList is important for the event callback!
    IList<ITrace> data = new List<ITrace>
    {
        new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = new List<object>{1,2,3},
            Y = new List<object>{1,2,3},
        }
    };

    private IList<ITrace> GenerateAxis()
    {
        var xAxis = new List<object>();

        for (int i = 0; i <= 12; i ++)
        {
            xAxis.Add(i);
        }

        return new List<ITrace>()
        {
            new Scatter
            {
                Name = "Bentners Algorithm",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = xAxis,
                Y = new List<object>
                {
                    //Tracker.GetPresentRaceFactors
                   GetRunningTotal(Tracker.PointsGivenForJockey),
                   GetRunningTotal(Tracker.PointsGivenForTrainer),
                    //TotalPointsForGetCurrentCondition
                   GetRunningTotal(Tracker.TotalPointsForLastTwoRaces),
                   GetRunningTotal(Tracker.TotalPointsForTimeSinceLastRace),

                    //TotalPointsForPastPerformance
                   GetRunningTotal(Tracker.TotalPointsForPastPerformance),
                    
                    //Tracker.TotalPointsForAdjustmentsPastPerformance,
                   GetRunningTotal(Tracker.TotalPointsForWeight),
                   GetRunningTotal(Tracker.TotalPointsForJockeyContribution),
                   GetRunningTotal(Tracker.TotalPointsForStrengthOfCompetition),

                   //GetHorsePreferences
                   GetRunningTotal(Tracker.TotalPointsForSpecificTrack),
                   GetRunningTotal(Tracker.TotalPointsForDistance),
                   GetRunningTotal(Tracker.TotalPointsForRaceType),
                   GetRunningTotal(Tracker.TotalPointsForGoing),
                },
                HoverTextArray = new List<string>
                {
                    "PointsGivenForJockey (1)",
                    "PointsGivenForTrainer (2)",
                    "TotalPointsForLastTwoRaces (2)",
                    "TotalPointsForTimeSinceLastRace (2)",
                    "TotalPointsForPastPerformance (3)",
                    "TotalPointsForWeight (4)",
                    "TotalPointsForJockeyContribution (4)",
                    "TotalPointsForStrengthOfCompetition (4)",
                    "TotalPointsForSpecificTrack (5)",
                    "TotalPointsForDistance (5)",
                    "TotalPointsForRaceType (5)",
                    "TotalPointsForGoing (5)"
                }
            }
        };
    }

    private decimal GetRunningTotal(decimal points)
    {
        totalPoints = totalPoints + points;
        return totalPoints;
    }
}
