@page "/Races/AdminPage"
@using AdminPunter.Pages.Components
@using Core.Enums

<PageTitle>Admin</PageTitle>

@inject IAdminAlgorithmService algorithmService;
@inject IAdminRaceService adminRaceService;


@if (isLoading)
{
    <div class="row">
        <div class="col-lg-12">
            <p>Loading...</p>
        </div>
    </div>
}
@if (!String.IsNullOrEmpty(error))
{
    <div class="row">
        <div class="col-lg-12">
            <p>@error</p>
        </div>
    </div>
}

<div class="row">
    <div class="col-lg-12">
       <input value="Get Missing Data" type="button" class="btn btn-primary" @onclick="@(e => @GetMissingData())" />
    </div>
</div>
<div class="row">
    @if (FailedResults == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Race Horse ID</th>
                    <th>Position</th>
                    <th>Description</th>
                    <th>Horse Name</th>
                    <th>Race URL</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in FailedResults)
                {
                    <tr>
                        <td>@item.RaceHorseId</td>
                        <td><input @bind-value="@item.Position" /></td>
                        <td><input @bind-value="@item.Description" /></td>
                        <td>@item.HorseName</td>
                        <td>@item.RaceUrl</td>
                        <input value="Process" type="button" class="btn btn-primary" @onclick="@(e => @ProcessResult(@item))" />

                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<div class="row">
    @if (FailedRaces == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Race URL</th>
                    <th>Description</th>
                    <th>Attempts</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in FailedRaces)
                {
                    <tr>
                        <td><input @bind-value="@item.RaceUrl" /></td>
                        <td>@item.Description</td>
                        <td>@item.Attempts</td>
                        <td>
                            <input value="Retry" type="button" class="btn btn-primary" @onclick="@(e => @RetryGetRace(@item))" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@code {
    bool isLoading = false;
    string error = "";
    private List<FailedResultsViewModel> FailedResults;
    private List<FailedRacesViewModel> FailedRaces;

    protected override async Task OnInitializedAsync()
    {
        FailedResults = algorithmService.GetFailedResultsTable();
        FailedRaces = algorithmService.GetFailedRacesTable();
    }

    private async Task GetMissingData()
    {
        isLoading = true;
        var processed = await adminRaceService.RunResultRetrieval();
        FailedResults = algorithmService.GetFailedResultsTable();
        error = $"Processed {processed} Race Horse Results";
        isLoading = false;
    }

    private async Task<bool> RetryGetRace(FailedRacesViewModel failedRace)
    {
        var result = false;
        try
        {
            isLoading = true;
            result = await adminRaceService.RetryRaceRetrieval(failedRace);
            isLoading = false;
            if (result == false)
            {
                error = "FAILED";
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;    
        }
        FailedRaces = algorithmService.GetFailedRacesTable();

        return result;
    }

    private async Task<bool> ProcessResult(FailedResultsViewModel failedResult)
    {
        var result = false;
        try
        {
            isLoading = true;
            result = await adminRaceService.ProcessResult(failedResult);
            isLoading = false;
            if (result == false)
            {
                error = "FAILED";
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        FailedResults = algorithmService.GetFailedResultsTable();

        return result;
    }
}
