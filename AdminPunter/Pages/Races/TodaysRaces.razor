@page "/Races/TodaysRaces"
@using AdminPunter.Pages.Components
@using Core.Enums
@inject IModalService modal  

<PageTitle>Todays Races</PageTitle>

@inject IAdminRaceService adminRaceService;

@if (events == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12 top-bar">
            @if(IsFirst)
            {      
                <input value="Previous Day" disabled type="button" class="btn-prv btn btn-primary" @onclick="@(e => @GetBatch(RaceRetrievalType.Previous))"/>
            }
            else
            {
                <input value="Previous Day" type="button" class="btn-prv btn btn-primary" @onclick="@(e => @GetBatch(RaceRetrievalType.Previous))"/>
            }
            <input value="Run algorithm" type="button" class="btn-ra btn btn-primary" @onclick="@(e => @ShowAlgorithmPopup(null))"/>
            @if(IsMostRecent)
            {      
                <input value="Next Day" type="button" class="btn-nxt btn btn-primary" disabled @onclick="@(e => @GetBatch(RaceRetrievalType.Next))"/>
            }
            else
            {
                <input value="Next Day" type="button" class="btn-nxt btn btn-primary" @onclick="@(e => @GetBatch(RaceRetrievalType.Next))"/>
            }
        </div>
    </div>
    @foreach (var even in events)
    {
        <div id="event-card-@even.EventId" class="row">
            <div class="event-card col-md-12" @onclick="@(e => @ShowEventRaces(even.EventId))">
                <div class="col-md-8 event-card-right">
                    <h2>@even.Track</h2>
                    <h4><a href="@even.MeetingURL">@even.EventName</a></h4>
                </div>
                <div class="col-md-4 event-card-left">
                    <ul>
                        <li>Races: @even.NumberOfRaces</li>
                        <li>Surface: @even.SurfaceType</li>
                        <li>Meeting Type: @even.MeetingType</li>
                    </ul>
                    <input value="Run algorithm" type="button" class="btn btn-primary" @onclick="@(e => @ShowAlgorithmPopup(even.EventId))"/>
                </div>
            </div>
            <div class="col-md-12 races-container">
                @if (even.ShowRaces)
                {
                    <table class="table">
                        <thead>
                        </thead>
                        <tbody>
                            @foreach (var race in even.EventRaces)
                            {
                                <RaceComponent Race=race />
                            }

                }
                        </tbody>
                </table>
    }
            </div>
        </div>
}}

@code {
    private bool IsMostRecent = true;
    private bool IsFirst = false;
    private Guid ActiveBatch;

    private List<TodaysRacesViewModel>? events;
    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetBatch(RaceRetrievalType.Current);
    }

    private void ShowEventRaces(int eventId)
    {
        var even = events.Where(x => x.EventId == eventId).FirstOrDefault();

        if (even.ShowRaces)
        {
            even.ShowRaces = false;
        }
        else 
        {
            even.ShowRaces = true;
        }
    }

    private async Task ShowAlgorithmPopup(int? eventId)
    {

        var modalOptions = new ModalOptions();
        modalOptions.Class = "blazored-modal-sm";
        if (eventId != null)
        {
            var even = events.Where(x => x.EventId == eventId).FirstOrDefault();
            //Run for one specific event
            var parameters = new ModalParameters();
            parameters.Add(nameof(RunAlgorithmPopup.SingleEvent), even);
            parameters.Add(nameof(RunAlgorithmPopup.Callback), EventCallback.Factory.Create<string>(this, Refresh));
            //Pass both into partial view below
            var result = modal.Show<RunAlgorithmPopup>(even.EventName, parameters, modalOptions);
        }
        else 
        {
            //Run for one specific event
            var parameters = new ModalParameters();
            parameters.Add(nameof(RunAlgorithmPopup.AllEvents), events);
            parameters.Add(nameof(RunAlgorithmPopup.Callback), EventCallback.Factory.Create<string>(this, Refresh));
            //Pass both into partial view below
            var result = Modal.Show<RunAlgorithmPopup>($"Races for {DateTime.Now.Date.ToString()}", parameters, modalOptions);
        }

    }

    public void Refresh(string test)
    {
        StateHasChanged();
    }

    public async Task GetBatch(RaceRetrievalType type)
    {
        if (type == RaceRetrievalType.Current)
        {
            events = await adminRaceService.GetTodaysRaces(type, null);
        }
        else
        {
            events = await adminRaceService.GetTodaysRaces(type, ActiveBatch);
        }

        if (events != null)
        {
            ActiveBatch = events.FirstOrDefault().BatchId;
            IsMostRecent = events.FirstOrDefault().IsMostRecent;
            IsFirst = events.FirstOrDefault().IsFirst;
        }
    }
}
